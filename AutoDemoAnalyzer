# AutoDemoAnalyzer Version 8-Linux
# READ BELOW BEFORE USING SCRIPT

# this code can be ran as part of a MAC-autostart script, or on its own.
# if you aren't sure, you should probably run this in independent mode.

# the demo analyzer can be found at https://github.com/MegaAntiCheat/analysis-template-rust, do not use the /demolyzer repository
# make sure that you have built it with the release cli version

# if you wish to run this in independent mode (without an autostart script): 
    # run the script when booting up the game (or at any point before starting to record any demos)

# if you are using my AutostartMAC script: 
    # place this script in the same directory as that script, and then run that script to start the game

# if you wish to use this as part of your own (python) autostart script:
    # place this script in the same directory as your autostart script
    # in your autostart script, after it has started the game, put the line `import AutoDemoAnalyzer` 
    # put `AutoDemoAnalyzer.mainloop() in your main (waiting for the game to close) loop

# regardless of what method you use, you will also need to set the following variables:

# set this to the path of your demo analyzer folder:
analyzer = '' # example: `analyzerpath = '/home/Saxton Hale/Desktop/analysis-template-rust-main/target/release/cli'`
# set this to the path of your TF2 demos folder:
demospath = '' # example: `demospath = '/steamapps/common/Team Fortress 2/tf/demos'`
# whether to output detections as a json file with your demo
# leave as False to just print to the terminal
detectfile = True # example: `detectfile = False`
# optional arguments to be passed to the analyzer:
# leave blank to just scan the demo with default settings:
arguments = '' # example: `arguments = '-a the_best_algorithm -p'`
# optional folder to always check for new demos:
# leave blank to just check the demos folder:
optfolder = '' # example: `optfolder = '/home/Merasmus/Desktop/suspicious demos'`

# beyond this point is the actual code, you can finish reading now





# importing stuff isn't always necessary, but I don't know what is in your autostart script
from time import sleep, time
from psutil import process_iter # for checking if tf2 has closed (only used in independent mode)
from os import environ, path # for debug mode, not required
from glob import glob # finding demo files
from subprocess import Popen, PIPE, CalledProcessError # running stuff

if ('TERM_PROGRAM' in environ.keys() and environ['TERM_PROGRAM'] == 'vscode'): # if in my debug environment
    debug = True
else: debug = False

def tf2chk(): # check if TF2 is open, taken from AutostartMAC
    for proc in process_iter():
        if proc.name() == 'tf_linux64':
            return True
    return False

def getdemos(): return set(glob(f'{demospath}/*.dem') + glob(f'{optfolder}/*.dem'))

demolist = getdemos()
# TF2 on linux doesn't lock demofiles for some reason so I have to do this
def newdemochk():
    global demolist
    demo = getdemos() - demolist
    if demo:
        demolist = getdemos()
        return demo.pop()
    return False # no need to set demolist as it won't have changed


def analyze(demotoanalyze):
    # run the analyzer, probably not the best way to do this but I couldn't be bothered to figure out rust
    print(f"** Analyzing {demotoanalyze} **")
    # from https://stackoverflow.com/a/28319191, required to keep live printing while adding file write functionality 
    linelist = []
    cmd = [analyzer, '-i', demotoanalyze, arguments]
    with Popen(cmd, stdout=PIPE, bufsize=1, universal_newlines=True) as p: # some of these params might not be needed on linux but if it works I ain't touching it
        for line in p.stdout:
            print(line, end='') # process line here
            linelist.append(line)
    if p.returncode != 0:
        raise CalledProcessError(p.returncode, p.args)
    if detectfile: # if we should write to file
        analysisfile = demotoanalyze.strip('.dem') + ' analysis' # create file in same folder as demo
        with open(f"{analysisfile}", 'w') as file:
            for item in linelist:
                file.write(item) # write output, line by line

def mainloop():
    newdemo = newdemochk()
    if newdemo:
        while path.getmtime(newdemo) + 3 >= time(): sleep(1) # wait until demo hasn't been modified in 3 seconds
        # may halt execution for long periods of time, but this is fine as tf2 will have to be open for it to occur
        analyze(newdemo)

if __name__ == "__main__": 
    print('** ADA started in independent mode **')

    # some below code also taken from AMAC
    if not debug: # don't wait for game to open if in debug mode
        print('** Waiting for TF2 to open **')
        while not tf2chk(): sleep(1) # wait for tf2 to open

    print('** Waiting for TF2 to close **')
    sleep(10) # required, game can be a bit screwy when starting

    while tf2chk(): # wait for tf2 to close
        sleep(1)
        mainloop()

    print('** Press Enter to exit AutoDemoAnalyzer **') # let user read output before exiting
    input()

else: print('** ADA started in import mode **')
