# AutoDemoAnalyzer Version 5
# READ BELOW BEFORE USING SCRIPT

# this code can be ran as part of a MAC-autostart script, or on its own.
# if you aren't sure, you should probably run this in independent mode.

# the demo analyzer can be found at https://github.com/MegaAntiCheat/analysis-template-rust, do not use the /demolyzer repository
# make sure that you have analyzed a demofile before, so that it generates the cli.exe file

# NOTICE: independent mode is the only one currently implemented, the others will be when I have the time

# if you wish to run this in independant mode (without an autostart script): 
    # run the script when booting up the game (or at any point before starting to record any demos)

# if you are using my AutostartAnticheat.py script: 
    # place this script in the same directory as that script, and then run that script to start the game

# if you wish to use this as part of your own (python) autostart script:
    # place this script in the same directory as your autostart script
    # at the top of your script, put `from time import time` 
    # in your autostart script, after it has started the game, put `gamestarttime = time()`
    # at the end of your autostart script, (after it has closed the game) run it with `import AutoDemoAnalyzer` followed by `AutoDemoAnalyzer.analyze(gamestarttime)`

# regardless of what method you use, you will also need to set the following variables:

# set this to the path of your demo analyzer folder:
analyzerpath = '?' # example: `analyzerpath = 'E:/SteamLibrary/steamapps/common/Team Fortress 2/analysis-template-rust-main'`
# set this to the path of your TF2 demos folder:
demospath = '?' # example: `demospath = 'E:/SteamLibrary/steamapps/common/Team Fortress 2/tf/demos'`
# whether to output detections as a json file with your demo
# leave as False to just print to the terminal
detectfile = False # example: `detectfile = False`
# optional arguments to be passed to the analyzer:
# leave blank to just scan the demo with default settings:
arguments = '' # example: `arguments = '-a the_best_algorithm -p'`
# optional folder to always check for new demos:
# leave blank to just check the demos folder:
optfolder = '' # example: `optfolder = 'E:/SteamLibrary/steamapps/common/Team Fortress 2/other demos'`

# beyond this point is the actual code, you can finish reading here



# importing stuff isn't always necessary, but I don't know what is in your autostart script
from time import time, sleep # for getting the current unix epoch and for waiting, respectively
import psutil # for checking if tf2 has closed (only used in independant mode)
import os # a lot of things
import glob # finding demo files
from subprocess import Popen, PIPE, CalledProcessError

if ('TERM_PROGRAM' in os.environ.keys() and os.environ['TERM_PROGRAM'] == 'vscode'): # if in my debug environment
    debug = True
else: debug = False

uncheckeddemos = []

def tf2chk(): # check if TF2 is open, taken from AutostartAnticheat
    for proc in psutil.process_iter():
        if proc.name() == 'tf_win64.exe':
            return True
    return False

def analyze(importedstarttime): # tf2 has closed, and both modes are synced back up
    global gamestarttime
    if not __name__ == "__main__": gamestarttime = importedstarttime # have to check this again to get the variable from import
    os.chdir(analyzerpath) # move to analyzer, for later

    # get demofiles, taken from stackoverflow
    list_of_files = glob.glob(f'{demospath}/*.dem') + glob.glob(f'{optfolder}/*.dem') # note: glob gives paths in a weird mixed `path/path/path\\file.dem` format
    print('** Getting new demofiles **')
    while True: # loop through latest demos
        latest_demo = max(list_of_files, key=os.path.getmtime) # get modification time of latest demo
        if os.path.getmtime(latest_demo) < gamestarttime: # if demo was modified before game was started
            print('** Finished looking for demofiles, starting analysis **')
            break
        print(f'** {latest_demo} is a new demo and will be analyzed **')
        uncheckeddemos.append(latest_demo.replace('\\','/')) # add demo to list, without the weird glob formatting
        list_of_files.remove(latest_demo) # remove the demo from the previous list, so that we don't keep adding the same demo over and over
    if debug: 
        print('** Debug mode detected, using example demo **')
        uncheckeddemos = ['E:/SteamLibrary/steamapps/common/Team Fortress 2/tf/demos/2025-09-23_09-42-09.dem']

    for demotocheck in uncheckeddemos: # use the new demos figured out previously
        # run the analyzer, probably not the best way to do this but I couldn't be bothered to figure out rust
        print(f"** Analyzing {demotocheck} **")
        # from https://stackoverflow.com/a/28319191, required to keep live printing while adding file write functionality 
        linelist = []
        cmd = f'"{analyzerpath}/target/release/cli.exe" -i "{demotocheck}" {arguments}' # not necessary, just looks nicer
        with Popen(cmd, stdout=PIPE, bufsize=1, universal_newlines=True) as p:
            for line in p.stdout:
                print(line, end='') # process line here
                linelist.append(line)
        if p.returncode != 0:
            raise CalledProcessError(p.returncode, p.args)
        if detectfile:
            analysisfile = demotocheck.strip('.dem') + ' analysis.json' # create file in same folder as demo
            with open(f"{analysisfile}", 'w') as file:
                for item in linelist:
                    file.write(item) # write output, line by line
    print('** Analysis finished, press enter to exit AutoDemoAnalyzer **')
    input() 

# warning: this code does not check that gamestarttime is a valid unix timestamp, and there will be an exception later if it isn't
if __name__ == "__main__": # start independent mode if ran without import
    print('** Independent mode detected **')
    # some below code also taken from AA
    if not debug:
        print('** Waiting for TF2 to open **')
        while not tf2chk(): sleep(1) # wait for tf2 to open
    gamestarttime = time()
    print('** Waiting for TF2 to close **')
    sleep(5) # buffer in case of weird stuff, may not be needed
    while tf2chk(): sleep(1) # wait for tf2 to close
    analyze(None) # start analysis immediately
else: 
    print('** Import mode detected **') # code imported, assume that this code is ran after the game has closed and that gamestarttime is a valid unix timestamp
    # wait for parent program to run analyze() when game has stopped
