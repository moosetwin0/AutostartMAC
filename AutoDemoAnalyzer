# AutoDemoAnalyzer Version 6.2
# READ BELOW BEFORE USING SCRIPT

# this code can be ran as part of a MAC-autostart script, or on its own.
# if you aren't sure, you should probably run this in independent mode.

# the demo analyzer can be found at https://github.com/MegaAntiCheat/analysis-template-rust, do not use the /demolyzer repository
# make sure that you have analyzed a demofile before, so that it generates the cli.exe file

# NOTICE: independent mode is the only one currently implemented, the others will be when I have the time

# if you wish to run this in independant mode (without an autostart script): 
    # run the script when booting up the game (or at any point before starting to record any demos)

# if you are using my AutostartAnticheat.py script: 
    # place this script in the same directory as that script, and then run that script to start the game

# if you wish to use this as part of your own (python) autostart script:
    # place this script in the same directory as your autostart script
    # at the top of your script, put `from time import time` 
    # in your autostart script, after it has started the game, put the lines `gamestarttime = time()`, `import AutoDemoAnalyzer`, and `AutoDemoAnalyzer.start(gamestarttime)`

# regardless of what method you use, you will also need to set the following variables:

# set this to the path of your demo analyzer folder:
analyzerpath = '' # example: `analyzerpath = 'E:/SteamLibrary/steamapps/common/Team Fortress 2/analysis-template-rust-main'`
# set this to the path of your TF2 demos folder:
demospath = '' # example: `demospath = 'E:/SteamLibrary/steamapps/common/Team Fortress 2/tf/demos'`
# whether to output detections as a json file with your demo
# leave as False to just print to the terminal
detectfile = True # example: `detectfile = False`
# optional arguments to be passed to the analyzer:
# leave blank to just scan the demo with default settings:
arguments = '' # example: `arguments = '-a the_best_algorithm -p'`
# optional folder to always check for new demos:
# leave blank to just check the demos folder:
optfolder = '' # example: `optfolder = 'E:/SteamLibrary/steamapps/common/Team Fortress 2/other demos'`

# beyond this point is the actual code, you can finish reading here



# importing stuff isn't always necessary, but I don't know what is in your autostart script
from time import time, sleep # for getting the current unix epoch and for waiting, respectively
import psutil # for checking if tf2 has closed (only used in independant mode)
import os # a lot of things
import glob # finding demo files
from subprocess import Popen, PIPE, CalledProcessError

if ('TERM_PROGRAM' in os.environ.keys() and os.environ['TERM_PROGRAM'] == 'vscode'): # if in my debug environment
    debug = True
else: debug = False

uncheckeddemos = []

def tf2chk(): # check if TF2 is open, taken from AutostartAnticheat
    for proc in psutil.process_iter():
        if proc.name() == 'tf_win64.exe':
            return True
    return False

checkeddemos = []

# this is bad code but it works
def getnewdemos(importedstarttime):
    global checkeddemos
    global gamestarttime
    global uncheckeddemos
    if not __name__ == "__main__": gamestarttime = importedstarttime # have to check this again to get the variable from import
    # get demofiles, taken from stackoverflow
    # at this rate it might be better to use sets than lists but I have been working on this for a full hour and I want it to be over
    # list_of_files is a legacy name and should be changed
    list_of_files = list(set(glob.glob(f'{demospath}/*.dem') + glob.glob(f'{optfolder}/*.dem')) - set(checkeddemos)) # note: glob gives paths in a weird mixed `path/path/path\\file.dem` format
    #if debug: list_of_files = ['E:/SteamLibrary/steamapps/common/Team Fortress 2/tf/demos\\2025-09-23_09-42-09.dem']
    if not list_of_files: return [] # if there are no unchecked demos, return 
    checkeddemos = list(set(checkeddemos + list_of_files)) # merge two lists, ignoring duplicates
    if len(list_of_files) > 1: latest_demo = max(list_of_files, key=os.path.getmtime) # if applicable, sort demos by newest modified
    for latest_demo in list_of_files: # loop through latest demos
        if os.path.getmtime(latest_demo) < gamestarttime: # if demo was modified before game was started
            break
        uncheckeddemos.append(latest_demo.replace('\\','/')) # add demo to list, without the weird glob formatting
        list_of_files.remove(latest_demo) # remove the demo from the previous list, so that we don't keep adding the same demo over and over
    return uncheckeddemos

def analyze(demotoanalyze):
    # run the analyzer, probably not the best way to do this but I couldn't be bothered to figure out rust
    print(f"** Analyzing {demotoanalyze} **")
    # from https://stackoverflow.com/a/28319191, required to keep live printing while adding file write functionality 
    linelist = []
    os.chdir(analyzerpath) # move to analyzer
    cmd = f'"{analyzerpath}/target/release/cli.exe" -i "{demotoanalyze}" {arguments}' # not necessary, just looks nicer
    with Popen(cmd, stdout=PIPE, bufsize=1, universal_newlines=True) as p:
        for line in p.stdout:
            print(line, end='') # process line here
            linelist.append(line)
    if p.returncode != 0:
        raise CalledProcessError(p.returncode, p.args)
    if detectfile: # if we should write to file
        analysisfile = demotoanalyze.strip('.dem') + ' analysis.json' # create file in same folder as demo
        with open(f"{analysisfile}", 'w') as file:
            for item in linelist:
                file.write(item) # write output, line by line

def inuse(file): # check if file is in use
    try: os.rename(file, file)
    except WindowsError: return True
    else: return False


def init(gamestarttime): # this is not good but I need to pass through the gamestarttime variable
    lockeddemos = []
    sleep(5)
    while tf2chk(): 
        sleep(1) # wait for tf2 to close
        newdemos = getnewdemos(gamestarttime) # returns any demos made since TF2 has started, excluding any already checked
        for newdemo in newdemos: # could probably be merged into getnewdemos()
            if inuse(newdemo): 
                lockeddemos.append(newdemo)
        for lockeddemo in lockeddemos:
            if not inuse(lockeddemo):
                analyze(lockeddemo)
                lockeddemos.remove(lockeddemo)

        #if debug: break
    print('** Press Enter to exit AutoDemoAnalyzer **')
    input()
    raise SystemExit # exit

# warning: this code does not check that gamestarttime is a valid unix timestamp, and there will be an exception later if it isn't
if __name__ == "__main__": # create gamestarttime if ran without import
    print('** Independent mode detected **')
    # some below code also taken from AA
    if not debug: # don't wait for game to open if in debug mode
        print('** Waiting for TF2 to open **')
        while not tf2chk(): sleep(1) # wait for tf2 to open
    gamestarttime = time()
    print('** Waiting for TF2 to close **')
    init(gamestarttime)
else:
    print('** Import mode detected **')
