# AutostartMAC Version 3
# READ BELOW BEFORE USING SCRIPT


# You can turn on/off the auto-demoanalyzer functionality here:
ADA = True # ex. `ADA = False`


# Set this variable to the absolute path of your client_backend file 
# ex. `client = '/home/Saxton Hale/.steam/steam/steamapps/common/Team Fortress 2/megaanticheat stuff/client_backend'`
client = ''

# Set this variable to the web interface link MAC gives you
# ex. `gui = 'http://127.0.0.1:1984'`
gui = 'http://127.0.0.1:1984'


# If you are using the AutoDemoAnalyzer functionality:

    # The demo analyzer can be found at https://github.com/MegaAntiCheat/analysis-template-rust, do not use the /demolyzer repository
    # Make sure that you have built it with the release cli version

    # Set this variable to the path of your demo analyzer folder:
    # ex. `analyzerpath = '/home/The Administrator/Desktop/analysis-template-rust-main/target/release/cli'`
analyzer = ''

    # Set this variable to the path of your TF2 demos folder:
    # ex. `demospath = '/home/Miss Pauling/.steam/steam/steamapps/common/Team Fortress 2/tf/demos'`
demospath = ''

    # Whether to output detections as a json file with your demo
    # Leave as False to just print to the terminal
detectfile = False # example: `detectfile = True`

    # Optional arguments to be passed to the analyzer:
    # Leave blank to just scan the demo with the default settings:
arguments = '' # example: `arguments = '-a the_best_algorithm -p'`


# Beyond this point is the actual code, you can finish reading here





from time import sleep, time # sleep for both, time for ADA
from os import path, environ # both for both
from webbrowser import open as webopen # for A-MAC
from psutil import process_iter # for A-MAC
from subprocess import Popen, PIPE, CalledProcessError # for both
from glob import glob # for ADA

if ('TERM_PROGRAM' in environ.keys() and environ['TERM_PROGRAM'] == 'vscode'): # if in my debug environment
    print('!! DEBUG MODE !!')
    debug = True
else: debug = False
debugdemo = {'/home/moosetwin/.steam/steam/steamapps/common/Team Fortress 2/tf/demos/2025-10-16_04-20-14.dem'} # demo with cheater

def tf2chk(): # check if TF2 is open
    for proc in process_iter():
        if proc.name() == 'tf_linux64':
            return True
    return False

def getdemos(): return set(glob(f'{demospath}/*.dem')) # getdemos() just used as a shorthand

# TF2 on linux doesn't lock demofiles for some reason so I have to do this
demolist = getdemos()
olddemo = ''
def demojuggling():
    global demolist
    global olddemo
    # check for new demos
    newdemo = getdemos() - demolist # see if there is any new demos since last we checked
    if debug: 
        print('enter 0 if you\'d like to create the demo yourself')
        print('enter 1 if you\'d like to use a test demo')
        debugoption = '' # have to initialize variable for while loop
        while debugoption not in ['0', '1', '']: # enter to make it yourself
            debugoption = input('0 or 1: ')
            if debugoption == '1': newdemo = debugdemo # no need to make if statement for '0'
    # handle new demos
    if newdemo:
        demolist = getdemos() # only need to update the list if it's changed
        print('-- New demo found --')
        if olddemo:  # a (maybe over-)complicated buffer to delay the demos until they have been written
            finisheddemo = olddemo # move old demo to temp var so it isn't lost
            olddemo = newdemo.pop() # remember new demo for later
            return finisheddemo # old demo finished writing, analyze
        else: # only runs for the first demo
            olddemo = newdemo.pop() # remember new demo for later
            return False # demo still being written, don't analyze yet

def analyze(demotoanalyze):
    # run the analyzer, probably not the best way to do this but I couldn't be bothered to figure out rust
    print(f"-- Analyzing {demotoanalyze} --")
    # from https://stackoverflow.com/a/28319191, required to keep live printing while adding file write functionality 
    linelist = []
    cmd = [analyzer, '-i', demotoanalyze, arguments]
    with Popen(cmd, stdout=PIPE, bufsize=1, universal_newlines=True) as p: # some of these params might not be needed on linux but if it works I ain't touching it
        for line in p.stdout:
            print(line, end='') # process line here
            linelist.append(line)
    if p.returncode != 0:
        raise CalledProcessError(p.returncode, p.args)
    if detectfile: # if we should write to file
        analysisfile = demotoanalyze.strip('.dem') + ' analysis' # create file in same folder as demo
        with open(f"{analysisfile}", 'w') as file:
            for item in linelist:
                file.write(item) # write output, line by line

def mainloop():
    newdemo = demojuggling()
    if newdemo:
        while path.getmtime(newdemo) + 3 >= time(): sleep(1) # wait until demo hasn't been modified in 3 seconds
        # may halt execution for long periods of time, but this is fine as tf2 will have to be open for it to occur
        analyze(newdemo)

# used when it is required to run a thing while continuing execution
progs = []
def altopen(filepath):
    # progs list used later to close any programs launched with altopen
    progs.append(Popen(filepath, cwd=path.split(filepath)[0], stdout = None, stderr = None)) # cwd = relative path, ex. /a/b/ from a/b/c.file

try: # not actually trying to catch any exceptions, just making sure that MAC closes properly
    webopen("steam://rungameid/440") # if commented out during debugging, make sure to uncomment
    altopen(client)
    print('-- Waiting for TF2 --')
    sleep(10) # required, game can be a bit screwy when starting

    while not tf2chk(): sleep(1) # wait for tf2 to open

    webopen(gui) # do this later so that MAC has time to initialize

    while tf2chk():
        if ADA: 
            newdemo = demojuggling()
            if newdemo:
                while path.getmtime(newdemo) + 3 >= time(): sleep(1) # wait until demo hasn't been modified in 3 seconds
                # may halt execution for long periods of time, but this is fine as tf2 will have to be open for it to occur
                analyze(newdemo)
        sleep(1) # wait for tf2 to close

    if olddemo: analyze(olddemo)
    # let user read ADA output/mark cheaters before exiting
    print('-- Press Enter to exit --')
    input()

    # can't close browser tabs easily so I leave it for future me
    # future me couldn't figure out how to do this without closing the entire window
    # closing happens after the ADA check so that users can mark cheaters caught by it
    print('-- Closing programs --')
    for item in progs: # close programs launched with altopen() earlier
        item.kill()

except Exception: # make sure MAC closes, this probably could be merged with the above but it's fine
    for item in progs: # close programs to prevent memory leak
        item.kill()
    raise
